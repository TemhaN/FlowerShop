@model List<FlowerShop.Models.User>

@{
    ViewData["Title"] = "Управление пользователями";
}

<div class="container mx-auto px-4 py-12 max-w-7xl">
    <a href="/Admin/Dashboard" class="back-button text-blue-500 hover:underline">Назад</a>
    <h1 class="text-3xl font-bold text-gray-800 mb-8">Управление пользователями</h1>

    <div class="mb-6">
        <button onclick="openModal('create-user-modal')" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition">Добавить пользователя</button>
    </div>

    <div class="bg-white rounded-xl shadow-lg overflow-x-auto">
        <table class="w-full">
            <thead>
                <tr class="bg-gray-100">
                    <th class="p-4 text-left">ID</th>
                    <th class="p-4 text-left">Имя пользователя</th>
                    <th class="p-4 text-left">Роль</th>
                    <th class="p-4 text-left">Действия</th>
                </tr>
            </thead>
            <tbody id="users-table">
                @foreach (var user in Model)
                {
                    <tr class="border-t" data-id="@user.Id">
                        <td class="p-4">@user.Id</td>
                        <td class="p-4">@user.Username</td>
                        <td class="p-4">@user.Role</td>
                        <td class="p-4">
                            <button onclick="openEditUserModal(@user.Id, '@user.Username', '@user.Role')" class="text-blue-500 hover:underline mr-4">Редактировать</button>
                            <button onclick="openDeleteModal(@user.Id, 'user')" class="text-red-500 hover:underline">Удалить</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Модальное окно для создания пользователя -->
    <div id="create-user-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white p-6 rounded-xl shadow-lg w-full max-w-md">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Добавить пользователя</h2>
            <form id="create-user-form">
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Имя пользователя</label>
                    <input type="text" name="Username" class="w-full border border-gray-300 rounded-lg px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-green-500" required />
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Пароль</label>
                    <input type="password" name="Password" class="w-full border border-gray-300 rounded-lg px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-green-500" required />
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Роль</label>
                    <select name="Role" class="w-full border border-gray-300 rounded-lg px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-green-500">
                        <option value="User">User</option>
                        <option value="Admin">Admin</option>
                    </select>
                </div>
                <div class="flex space-x-4">
                    <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition">Сохранить</button>
                    <button type="button" onclick="closeModal('create-user-modal')" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition">Отмена</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Модальное окно для редактирования пользователя -->
    <div id="edit-user-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white p-6 rounded-xl shadow-lg w-full max-w-md">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Редактировать пользователя</h2>
            <form id="edit-user-form">
                <input type="hidden" name="Id" id="edit-user-id" />
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Имя пользователя</label>
                    <input type="text" name="Username" id="edit-user-username" class="w-full border border-gray-300 rounded-lg px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-green-500" required />
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Пароль (оставьте пустым, чтобы не менять)</label>
                    <input type="password" name="Password" id="edit-user-password" class="w-full border border-gray-300 rounded-lg px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-green-500" />
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Роль</label>
                    <select name="Role" id="edit-user-role" class="w-full border border-gray-300 rounded-lg px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-green-500">
                        <option value="User">User</option>
                        <option value="Admin">Admin</option>
                    </select>
                </div>
                <div class="flex space-x-4">
                    <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition">Сохранить</button>
                    <button type="button" onclick="closeModal('edit-user-modal')" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition">Отмена</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Модальное окно для подтверждения удаления -->
    <div id="delete-user-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white p-6 rounded-xl shadow-lg w-full max-w-md">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Подтверждение удаления</h2>
            <p class="mb-4">Вы уверены, что хотите удалить этого пользователя?</p>
            <form id="delete-user-form">
                <input type="hidden" name="id" id="delete-user-id" />
                <div class="flex space-x-4">
                    <button type="submit" id="delete-user-submit" class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition">Удалить</button>
                    <button type="button" onclick="closeModal('delete-user-modal')" class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition">Отмена</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function openModal(modalId) {
        document.getElementById(modalId).classList.remove('hidden');
    }

    function closeModal(modalId) {
        document.getElementById(modalId).classList.add('hidden');
    }

    function openEditUserModal(id, username, role) {
        document.getElementById('edit-user-id').value = id;
        document.getElementById('edit-user-username').value = username;
        document.getElementById('edit-user-role').value = role;
        document.getElementById('edit-user-password').value = '';
        openModal('edit-user-modal');
    }

    function openDeleteModal(id, type) {
        console.log(`Opening delete modal for ${type} with ID: ${id}`);
        if (!id || isNaN(id)) {
            alert('Ошибка: Неверный ID пользователя');
            return;
        }
        document.getElementById(`delete-${type}-id`).value = id;
        openModal(`delete-${type}-modal`);
    }

        function handleDeleteSubmit(e) {
        e.preventDefault();
        const submitButton = document.getElementById('delete-user-submit');
        if (submitButton.disabled) {
            return;
        }
        submitButton.disabled = true;
        submitButton.textContent = 'Удаление...'; // Визуальная обратная связь

        const idInput = document.getElementById('delete-user-id');
        const id = idInput.value.trim(); // Удаляем пробелы
        console.log(`Raw ID from input: "${id}"`); // Логируем сырое значение
        const parsedId = parseInt(id, 10); // Явно указываем базу 10
        console.log(`Parsed ID: ${parsedId}`); // Логируем преобразованное значение

        if (!id || isNaN(parsedId) || parsedId <= 0) {
            console.error(`Invalid ID: "${id}" (parsed: ${parsedId})`);
            alert('Ошибка: Неверный ID пользователя');
            submitButton.disabled = false;
            submitButton.textContent = 'Удалить';
            return;
        }

        fetch('/Admin/DeleteUser', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: parsedId })
        })
            .then(response => {
                console.log(`Response status: ${response.status}`); // Логируем статус ответа
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(`HTTP ${response.status}: ${text}`); });
                }
                return response.json();
            })
            .then(result => {
                console.log('Server response:', result); // Логируем полный ответ сервера
                if (result.success) {
                    document.querySelector(`#users-table tr[data-id="${parsedId}"]`).remove();
                    closeModal('delete-user-modal');
                    fetch('/Admin/Users')
                        .then(response => response.text())
                        .then(html => {
                            const parser = new DOMParser();
                            const doc = parser.parseFromString(html, 'text/html');
                            document.getElementById('users-table').innerHTML = doc.getElementById('users-table').innerHTML;
                        })
                        .then(() => {
                            alert(result.message);
                        });
                } else {
                    alert('Ошибка: ' + result.message);
                }
            })
            .catch(error => {
                console.error('Delete error:', error);
                alert('Ошибка при удалении пользователя: ' + error.message);
            })
            .finally(() => {
                submitButton.disabled = false;
                submitButton.textContent = 'Удалить';
            });
    }

    // Привязка обработчика к форме удаления
    document.getElementById('delete-user-form').addEventListener('submit', handleDeleteSubmit);

    // Обработчик для создания пользователя
    document.getElementById('create-user-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        try {
            const response = await fetch('/Admin/CreateUser', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            const result = await response.json();
            if (result.success) {
                const table = document.getElementById('users-table');
                const row = document.createElement('tr');
                row.className = 'border-t';
                row.dataset.id = result.data.id;
                row.innerHTML = `
                    <td class="p-4">${result.data.id}</td>
                    <td class="p-4">${result.data.username}</td>
                    <td class="p-4">${result.data.role}</td>
                    <td class="p-4">
                        <button onclick="openEditUserModal(${result.data.id}, '${result.data.username}', '${result.data.role}')" class="text-blue-500 hover:underline mr-4">Редактировать</button>
                        <button onclick="openDeleteModal(${result.data.id}, 'user')" class="text-red-500 hover:underline">Удалить</button>
                    </td>
                `;
                table.appendChild(row);
                closeModal('create-user-modal');
                alert(result.message);
            } else {
                alert('Ошибка: ' + result.message);
            }
        } catch (error) {
            alert('Ошибка при создании пользователя: ' + error.message);
        }
    });

    // Обработчик для редактирования пользователя
    document.getElementById('edit-user-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        try {
            const response = await fetch('/Admin/EditUser', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            const result = await response.json();
            if (result.success) {
                const row = document.querySelector(`#users-table tr[data-id="${result.data.id}"]`);
                row.innerHTML = `
                    <td class="p-4">${result.data.id}</td>
                    <td class="p-4">${result.data.username}</td>
                    <td class="p-4">${result.data.role}</td>
                    <td class="p-4">
                        <button onclick="openEditUserModal(${result.data.id}, '${result.data.username}', '${result.data.role}')" class="text-blue-500 hover:underline mr-4">Редактировать</button>
                        <button onclick="openDeleteModal(${result.data.id}, 'user')" class="text-red-500 hover:underline">Удалить</button>
                    </td>
                `;
                closeModal('edit-user-modal');
                alert(result.message);
            } else {
                alert('Ошибка: ' + result.message);
            }
        } catch (error) {
            alert('Ошибка при обновлении пользователя: ' + error.message);
        }
    });
</script>